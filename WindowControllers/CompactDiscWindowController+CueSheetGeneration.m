/*
 *  Copyright (C) 2008 Stephen F. Booth <me@sbooth.org>
 *  All Rights Reserved
 */

#import "CompactDiscWindowController+CueSheetGeneration.h"

#import "CompactDisc.h"
#import "SessionDescriptor.h"
#import "TrackDescriptor.h"
#import "AlbumMetadata.h"
#import "TrackMetadata.h"

#import "CDDAUtilities.h"

@implementation CompactDiscWindowController (CueSheetGeneration)

- (BOOL) writeCueSheetToURL:(NSURL *)cueSheetURL error:(NSError **)error
{
	NSParameterAssert(nil != cueSheetURL);
	
	NSMutableString *cueSheetString = [NSMutableString string];
	
	NSString *appName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleName"];
	NSString *shortVersionNumber = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
	NSString *versionNumber = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleVersion"];	
	[cueSheetString appendFormat:@"REM Created by %@ %@ (%@)\n", appName, shortVersionNumber, versionNumber];
	
	[cueSheetString appendString:@"\n"];
	
	[cueSheetString appendFormat:@"REM FreeDB Disc ID %08x\n", self.compactDisc.freeDBDiscID];
	[cueSheetString appendFormat:@"REM MusicBrainz Disc ID %@\n", self.compactDisc.musicBrainzDiscID];
	
	if(self.compactDisc.metadata.date)
		[cueSheetString appendFormat:@"REM DATE %@\n", self.compactDisc.metadata.date];
	
	[cueSheetString appendString:@"\n"];
	
	if(self.compactDisc.metadata.MCN)
		[cueSheetString appendFormat:@"CATALOG %@\n", self.compactDisc.metadata.MCN];
	
	// Title, artist
	if(self.compactDisc.metadata.title)
		[cueSheetString appendFormat:@"TITLE \"%@\"\n", self.compactDisc.metadata.title];
	
	if(self.compactDisc.metadata.artist)
		[cueSheetString appendFormat:@"PERFORMER \"%@\"\n", self.compactDisc.metadata.artist];
	
	[cueSheetString appendString:@"\n"];
	
	for(TrackDescriptor *trackDescriptor in self.compactDisc.firstSession.orderedTracks) {
		// Track number
		[cueSheetString appendFormat:@"TRACK %02i AUDIO\n", trackDescriptor.number.integerValue];
		
		CDMSF trackMSF = CDConvertLBAToMSF(trackDescriptor.firstSector.integerValue - 150);
		
		// Pregap
		if(trackDescriptor.pregap && trackDescriptor.pregap.integerValue) {
			// INDEX 00 uses audio from the file to fill the pregap
			if(1) {
				CDMSF trackPregapMSF = subtractCDMSF(trackMSF, trackPregapMSF);
				[cueSheetString appendFormat:@"  INDEX 00 %02i:%02i:%02i\n", trackPregapMSF.minute, trackPregapMSF.second, trackPregapMSF.frame];
			}
			// PREGAP indicates digital silence to be generated by the burner
			else {
				CDMSF trackPregapMSF = CDConvertLBAToMSF(trackDescriptor.pregap.integerValue - 150);
				[cueSheetString appendFormat:@"  PREGAP %02i:%02i:%02i\n", trackPregapMSF.minute, trackPregapMSF.second, trackPregapMSF.frame];
			}
		}
		
		// Index
		[cueSheetString appendFormat:@"  INDEX 01 %02i:%02i:%02i\n", trackMSF.minute, trackMSF.second, trackMSF.frame];
		
		// Flags
		NSMutableArray *flagsArray = [NSMutableArray array];
		if(trackDescriptor.digitalCopyPermitted.boolValue)
			[flagsArray addObject:@"DCP"];
		if(trackDescriptor.hasPreEmphasis.boolValue)
			[flagsArray addObject:@"PRE"];
		if(4 == trackDescriptor.channelsPerFrame.integerValue)
			[flagsArray addObject:@"4CH"];
		if(trackDescriptor.isDataTrack.boolValue)
			[flagsArray addObject:@"DATA"];
		
		if(flagsArray.count)
			[cueSheetString appendFormat:@"  FLAGS %@\n", [flagsArray componentsJoinedByString:@" "]];
		
		// ISRC
		if(trackDescriptor.metadata.ISRC)
			[cueSheetString appendFormat:@"  ISRC %@\n", trackDescriptor.metadata.ISRC];
		
		// Track title, artist and composer
		if(trackDescriptor.metadata.title)
			[cueSheetString appendFormat:@"  TITLE \"%@\"\n", trackDescriptor.metadata.title];
		
		if(trackDescriptor.metadata.artist)
			[cueSheetString appendFormat:@"  PERFORMER \"%@\"\n", trackDescriptor.metadata.artist];
		
		if(trackDescriptor.metadata.composer)
			[cueSheetString appendFormat:@"  SONGWRITER \"%@\"\n", trackDescriptor.metadata.composer];
		
		[cueSheetString appendString:@"\n"];
	}
	
	return [cueSheetString writeToURL:cueSheetURL atomically:YES encoding:NSUTF8StringEncoding error:error];
}

@end
